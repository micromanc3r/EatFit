//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
    fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
    fileprivate static let hostingBundle = Bundle(for: R.Class.self)

    static func validate() throws {
        try intern.validate()
    }

    /// This `R.color` struct is generated, and contains static references to 0 colors.
    struct color {
        fileprivate init() {}
    }

    /// This `R.file` struct is generated, and contains static references to 1 files.
    struct file {
        /// Resource file `food.csv`.
        static let foodCsv = Rswift.FileResource(bundle: R.hostingBundle, name: "food", pathExtension: "csv")

        /// `bundle.url(forResource: "food", withExtension: "csv")`
        static func foodCsv(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.foodCsv
            return fileResource.bundle.url(forResource: fileResource)
        }

        fileprivate init() {}
    }

    /// This `R.font` struct is generated, and contains static references to 0 fonts.
    struct font {
        fileprivate init() {}
    }

    /// This `R.image` struct is generated, and contains static references to 0 images.
    struct image {
        fileprivate init() {}
    }

    /// This `R.nib` struct is generated, and contains static references to 0 nibs.
    struct nib {
        fileprivate init() {}
    }

    /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
    struct reuseIdentifier {
        fileprivate init() {}
    }

    /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
    struct segue {
        fileprivate init() {}
    }

    /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
    struct storyboard {
        /// Storyboard `LaunchScreen`.
        static let launchScreen = _R.storyboard.launchScreen()

        /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
        static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
            return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
        }

        fileprivate init() {}
    }

    /// This `R.string` struct is generated, and contains static references to 1 localization tables.
    struct string {
        /// This `R.string.localizable` struct is generated, and contains static references to 2 localization keys.
        struct localizable {
            /// Value: Confirm
            static let mc_button = Rswift.StringResource(key: "mc_button", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
            /// Value: How many meals?
            static let mc_title = Rswift.StringResource(key: "mc_title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

            /// Value: Confirm
            static func mc_button(_: Void = ()) -> String {
                return NSLocalizedString("mc_button", bundle: R.hostingBundle, comment: "")
            }

            /// Value: How many meals?
            static func mc_title(_: Void = ()) -> String {
                return NSLocalizedString("mc_title", bundle: R.hostingBundle, comment: "")
            }

            fileprivate init() {}
        }

        fileprivate init() {}
    }

    fileprivate struct intern: Rswift.Validatable {
        fileprivate static func validate() throws {
            // There are no resources to validate
        }

        fileprivate init() {}
    }

    fileprivate class Class {}

    fileprivate init() {}
}

struct _R {
    struct nib {
        fileprivate init() {}
    }

    struct storyboard {
        struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
            typealias InitialController = UIKit.UIViewController

            let bundle = R.hostingBundle
            let name = "LaunchScreen"

            fileprivate init() {}
        }

        fileprivate init() {}
    }

    fileprivate init() {}
}
